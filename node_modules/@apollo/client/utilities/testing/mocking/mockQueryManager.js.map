{"version":3,"file":"mockQueryManager.js","sourceRoot":"","sources":["../../../../src/utilities/testing/mocking/mockQueryManager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,cAAc,EAAkB,MAAM,YAAY,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,uCAAuC,CAAC;AAItE,gBAAe,UACb,MAA4B;IAC5B,yBAAoC;SAApC,UAAoC,EAApC,qBAAoC,EAApC,IAAoC;QAApC,wCAAoC;;IAEpC,OAAO,IAAI,YAAY,CAAC;QACtB,IAAI,EAAE,cAAc,eAAI,eAAe,EAAE,UAAU,CAAC,MAAM,CAAC;QAC3D,KAAK,EAAE,IAAI,aAAa,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;KACjD,CAAC,CAAC;AACL,CAAC,EAAC","sourcesContent":"import { QueryManager } from \"../../../core/QueryManager.js\";\nimport { mockSingleLink } from \"./mockLink.js\";\nimport { InMemoryCache } from \"../../../cache/inmemory/inMemoryCache.js\";\nexport default (function (reject) {\n    var mockedResponses = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        mockedResponses[_i - 1] = arguments[_i];\n    }\n    return new QueryManager({\n        link: mockSingleLink.apply(void 0, mockedResponses).setOnError(reject),\n        cache: new InMemoryCache({ addTypename: false }),\n    });\n});\n//# sourceMappingURL=mockQueryManager.js.map"}