{"version":3,"file":"mockWatchQuery.js","sourceRoot":"","sources":["../../../../src/utilities/testing/mocking/mockWatchQuery.ts"],"names":[],"mappings":";AACA,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAGlD,gBAAe,UACb,MAA4B;IAC5B,yBAAoC;SAApC,UAAoC,EAApC,qBAAoC,EAApC,IAAoC;QAApC,wCAAoC;;IAEpC,IAAM,YAAY,GAAG,gBAAgB,+BAAC,MAAM,GAAK,eAAe,EAAC,CAAC;IAClE,IAAM,YAAY,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IAChD,OAAO,YAAY,CAAC,UAAU,CAAC;QAC7B,KAAK,EAAE,YAAY,CAAC,KAAM;QAC1B,SAAS,EAAE,YAAY,CAAC,SAAS;QACjC,2BAA2B,EAAE,KAAK;KACnC,CAAC,CAAC;AACL,CAAC,EAAC","sourcesContent":"import { __spreadArrays } from \"tslib\";\nimport mockQueryManager from \"./mockQueryManager.js\";\nexport default (function (reject) {\n    var mockedResponses = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        mockedResponses[_i - 1] = arguments[_i];\n    }\n    var queryManager = mockQueryManager.apply(void 0, __spreadArrays([reject], mockedResponses));\n    var firstRequest = mockedResponses[0].request;\n    return queryManager.watchQuery({\n        query: firstRequest.query,\n        variables: firstRequest.variables,\n        notifyOnNetworkStatusChange: false\n    });\n});\n//# sourceMappingURL=mockWatchQuery.js.map"}