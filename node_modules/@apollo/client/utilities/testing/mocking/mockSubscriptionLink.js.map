{"version":3,"file":"mockSubscriptionLink.js","sourceRoot":"","sources":["../../../../src/utilities/testing/mocking/mockSubscriptionLink.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,UAAU,EAA0B,MAAM,oBAAoB,CAAC;AAYxE;IAA0C,wCAAU;IAOlD;QAAA,YACE,iBAAO,SACR;QARM,mBAAa,GAAU,EAAE,CAAC;QAC1B,YAAM,GAAU,EAAE,CAAC;QAGlB,eAAS,GAAU,EAAE,CAAC;;IAI9B,CAAC;IAEM,sCAAO,GAAd,UAAe,SAAoB;QAAnC,iBASC;QARC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,OAAO,IAAI,UAAU,CAAc,UAAA,QAAQ;YACzC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,EAAH,CAAG,CAAC,CAAC;YAC9B,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9B,OAAO;gBACL,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,EAAH,CAAG,CAAC,CAAC;YACvC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,6CAAc,GAArB,UAAsB,MAAgC,EAAE,QAAgB;QAAxE,iBAUC;QAVuD,yBAAA,EAAA,gBAAgB;QACtE,UAAU,CAAC;YACD,IAAA,SAAS,GAAK,KAAI,UAAT,CAAU;YAC3B,IAAI,CAAC,SAAS,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;YACjE,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;gBACxB,IAAI,QAAQ,IAAI,QAAQ,CAAC,QAAQ;oBAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACvD,IAAI,MAAM,CAAC,MAAM,IAAI,QAAQ,CAAC,IAAI;oBAAE,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACjE,IAAI,MAAM,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;oBAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;QACL,CAAC,EAAE,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;IACxB,CAAC;IAEM,+CAAgB,GAAvB;QACU,IAAA,SAAS,GAAK,IAAI,UAAT,CAAU;QAC3B,IAAI,CAAC,SAAS,CAAC,MAAM;YAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QACjE,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;YACxB,IAAI,QAAQ,CAAC,QAAQ;gBAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,sCAAO,GAAd,UAAe,QAAa;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/C,CAAC;IAEM,4CAAa,GAApB,UAAqB,QAAa;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7D,CAAC;IACH,2BAAC;AAAD,CAAC,AAjDD,CAA0C,UAAU,GAiDnD;;AAED,MAAM,UAAU,kBAAkB;IAChC,OAAO,IAAI,oBAAoB,EAAE,CAAC;AACpC,CAAC","sourcesContent":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../index.js\";\nimport { ApolloLink } from \"../../../link/core/index.js\";\nvar MockSubscriptionLink = (function (_super) {\n    __extends(MockSubscriptionLink, _super);\n    function MockSubscriptionLink() {\n        var _this = _super.call(this) || this;\n        _this.unsubscribers = [];\n        _this.setups = [];\n        _this.observers = [];\n        return _this;\n    }\n    MockSubscriptionLink.prototype.request = function (operation) {\n        var _this = this;\n        this.operation = operation;\n        return new Observable(function (observer) {\n            _this.setups.forEach(function (x) { return x(); });\n            _this.observers.push(observer);\n            return function () {\n                _this.unsubscribers.forEach(function (x) { return x(); });\n            };\n        });\n    };\n    MockSubscriptionLink.prototype.simulateResult = function (result, complete) {\n        var _this = this;\n        if (complete === void 0) { complete = false; }\n        setTimeout(function () {\n            var observers = _this.observers;\n            if (!observers.length)\n                throw new Error('subscription torn down');\n            observers.forEach(function (observer) {\n                if (complete && observer.complete)\n                    observer.complete();\n                if (result.result && observer.next)\n                    observer.next(result.result);\n                if (result.error && observer.error)\n                    observer.error(result.error);\n            });\n        }, result.delay || 0);\n    };\n    MockSubscriptionLink.prototype.simulateComplete = function () {\n        var observers = this.observers;\n        if (!observers.length)\n            throw new Error('subscription torn down');\n        observers.forEach(function (observer) {\n            if (observer.complete)\n                observer.complete();\n        });\n    };\n    MockSubscriptionLink.prototype.onSetup = function (listener) {\n        this.setups = this.setups.concat([listener]);\n    };\n    MockSubscriptionLink.prototype.onUnsubscribe = function (listener) {\n        this.unsubscribers = this.unsubscribers.concat([listener]);\n    };\n    return MockSubscriptionLink;\n}(ApolloLink));\nexport { MockSubscriptionLink };\nexport function mockObservableLink() {\n    return new MockSubscriptionLink();\n}\n//# sourceMappingURL=mockSubscriptionLink.js.map"}