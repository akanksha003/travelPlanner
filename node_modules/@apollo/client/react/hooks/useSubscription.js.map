{"version":3,"file":"useSubscription.js","sourceRoot":"","sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAKhE,OAAO,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAE3C,OAAO,EAAE,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAE9C,MAAM,UAAU,eAAe,CAC7B,YAAiE,EACjE,OAAoD;IAEpD,IAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAE,CAAC,CAAC;IAC/C,IAAM,cAAc,GAAG,OAAO;QAC5B,CAAC,uBAAM,OAAO,KAAE,YAAY,cAAA,IAC5B,CAAC,CAAC,EAAE,YAAY,cAAA,EAAE,CAAC;IACf,IAAA,KAAsB,QAAQ,CAAC;QACnC,OAAO,EAAE,CAAC,cAAc,CAAC,IAAI;QAC7B,KAAK,EAAE,SAAS;QAChB,IAAI,EAAE,SAAS;KAChB,CAAC,EAJK,MAAM,QAAA,EAAE,SAAS,QAItB,CAAC;IAEH,IAAM,mBAAmB,GAAG,MAAM,EAAuC,CAAC;IAC1E,SAAS,sBAAsB;QAC7B,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE;YAChC,mBAAmB,CAAC,OAAO,GAAG,IAAI,gBAAgB,CAAoB;gBACpE,OAAO,EAAE,cAAc;gBACvB,OAAO,SAAA;gBACP,SAAS,WAAA;aACV,CAAC,CAAC;SACJ;QACD,OAAO,mBAAmB,CAAC,OAAO,CAAC;IACrC,CAAC;IAED,IAAM,gBAAgB,GAAG,sBAAsB,EAAE,CAAC;IAClD,gBAAgB,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAClD,gBAAgB,CAAC,OAAO,GAAG,OAAO,CAAC;IAEnC,SAAS,CAAC,cAAM,OAAA,gBAAgB,CAAC,YAAY,EAAE,EAA/B,CAA+B,CAAC,CAAC;IACjD,SAAS,CAAC,cAAM,OAAA,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAA/C,CAA+C,EAAE,EAAE,CAAC,CAAC;IAErE,OAAO,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC1C,CAAC","sourcesContent":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useSubscription(subscription, options) {\n    var context = useContext(getApolloContext());\n    var updatedOptions = options\n        ? __assign(__assign({}, options), { subscription: subscription }) : { subscription: subscription };\n    var _a = useState({\n        loading: !updatedOptions.skip,\n        error: undefined,\n        data: undefined\n    }), result = _a[0], setResult = _a[1];\n    var subscriptionDataRef = useRef();\n    function getSubscriptionDataRef() {\n        if (!subscriptionDataRef.current) {\n            subscriptionDataRef.current = new SubscriptionData({\n                options: updatedOptions,\n                context: context,\n                setResult: setResult\n            });\n        }\n        return subscriptionDataRef.current;\n    }\n    var subscriptionData = getSubscriptionDataRef();\n    subscriptionData.setOptions(updatedOptions, true);\n    subscriptionData.context = context;\n    useEffect(function () { return subscriptionData.afterExecute(); });\n    useEffect(function () { return subscriptionData.cleanup.bind(subscriptionData); }, []);\n    return subscriptionData.execute(result);\n}\n//# sourceMappingURL=useSubscription.js.map"}